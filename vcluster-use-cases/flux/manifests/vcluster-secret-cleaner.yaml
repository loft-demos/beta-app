---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vcluster-secret-cleaner
  namespace: p-vcluster-flux-demo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vci-reader
  namespace: p-vcluster-flux-demo
rules:
  - apiGroups: ["management.loft.sh"]
    resources: ["virtualclusterinstances"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vci-reader
  namespace: p-vcluster-flux-demo
subjects:
  - kind: ServiceAccount
    name: vcluster-secret-cleaner
    namespace: p-vcluster-flux-demo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vci-reader
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-deleter
  namespace: flux-apps
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-deleter
  namespace: flux-apps
subjects:
  - kind: ServiceAccount
    name: vcluster-secret-cleaner
    namespace: p-auth-core               # SA lives in p-auth-core
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-deleter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vcluster-secret-cleaner
  namespace: p-vcluster-flux-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vcluster-secret-cleaner
  template:
    metadata:
      labels:
        app: vcluster-secret-cleaner
    spec:
      serviceAccountName: vcluster-secret-cleaner
      containers:
        - name: cleaner
          image: bitnami/kubectl:1.30
          env:
            # Namespace where the VCIs live
            - name: SRC_NS
              value: "p-vcluster-flux-demo"
            # Namespace where Flux cluster Secrets live
            - name: TARGET_NS
              value: "flux-apps"
            # Optional label selector to narrow which VCIs we track
            - name: SELECTOR
              value: ""   # e.g. env=dev,team=payments
            # Poll interval
            - name: INTERVAL
              value: "10"
          command:
            - /bin/sh
            - -ceu
            - |
              prev_names=""

              list_vci_names() {
                if [ -n "${SELECTOR}" ]; then
                  kubectl get virtualclusterinstances.management.loft.sh -n "${SRC_NS}" -l "${SELECTOR}" -o jsonpath="{.items[*].metadata.name}"
                else
                  kubectl get virtualclusterinstances.management.loft.sh -n "${SRC_NS}" -o jsonpath="{.items[*].metadata.name}"
                fi
              }

              # Turn space-separated -> sorted unique newline list
              to_lines() { tr ' ' '\n' | grep -v '^[[:space:]]*$' | sort -u; }

              # Compute project from namespace by stripping a leading "p-"
              project_from_ns() {
                ns="$1"
                printf '%s' "${ns#p-}"
              }

              secret_name_for_vci() {
                vci_name="$1"
                # project is derived from the VCI namespace (SRC_NS)
                proj="$(project_from_ns "${SRC_NS}")"
                printf 'vc-%s-%s' "${proj}" "${vci_name}"
              }

              while :; do
                curr_names="$(list_vci_names)"

                # diff: disappeared = prev - curr
                disappeared=$(comm -23 <(printf '%s\n' ${prev_names} | to_lines) <(printf '%s\n' ${curr_names} | to_lines) || true)

                if [ -n "${disappeared}" ]; then
                  echo "Detected deleted VirtualClusterInstances:"
                  for nm in ${disappeared}; do
                    secname="$(secret_name_for_vci "${nm}")"
                    echo "Deleting Secret ${TARGET_NS}/${secname} for deleted VCI ${nm}..."
                    kubectl -n "${TARGET_NS}" delete secret "${secname}" --ignore-not-found
                  done
                fi

                prev_names="${curr_names}"
                sleep "${INTERVAL}"
              done