---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vcluster-secret-cleaner
  namespace: p-vcluster-flux-demo
---
# Read VCIs in any namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vci-reader-any-namespace
rules:
  - apiGroups: ["management.loft.sh"]
    resources: ["virtualclusterinstances"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vci-reader-any-namespace
subjects:
  - kind: ServiceAccount
    name: vcluster-secret-cleaner
    namespace: p-vcluster-flux-demo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vci-reader-any-namespace
---
# Manage Secrets in flux-apps
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-cleaner
  namespace: flux-apps
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-cleaner
  namespace: flux-apps
subjects:
  - kind: ServiceAccount
    name: vcluster-secret-cleaner
    namespace: p-vcluster-flux-demo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-cleaner
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vcluster-secret-cleaner
  namespace: p-vcluster-flux-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vcluster-secret-cleaner
  template:
    metadata:
      labels:
        app: vcluster-secret-cleaner
    spec:
      serviceAccountName: vcluster-secret-cleaner
      containers:
        - name: cleaner
          image: bitnami/kubectl:1.30
          env:
            # Namespace where the VCIs live
            - name: SRC_NS
              value: "p-vcluster-flux-demo"
            # Namespace where Flux cluster Secrets live
            - name: TARGET_NS
              value: "flux-apps"
            # Optional label selector to narrow which VCIs we track
            - name: SELECTOR
              value: ""   # e.g. env=dev,team=payments
            # Poll interval
            - name: INTERVAL
              value: "10"
          command:
            - /bin/sh
            - -ceu
            - |
              : "${TARGET_NS:?missing TARGET_NS}"
              : "${INTERVAL:=10}"

              while :; do
                # name \t vci_name \t vci_ns \t managed
                lines="$(kubectl -n "${TARGET_NS}" get secret \
                  -l 'fluxcd.io/secret-type=cluster' \
                  -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.metadata.labels.loft\.sh/vcluster-instance-name}{"\t"}{.metadata.labels.loft\.sh/vcluster-instance-namespace}{"\t"}{.metadata.labels.mirror\.fluxcd\.io/managed}{"\n"}{end}' || true)"

                echo "${lines}" | while IFS="$(printf '\t')" read -r sname vci_name vci_ns managed; do
                  [ -n "${sname}" ] || continue

                  # OPTIONAL safety: only clean up secrets we manage
                  if [ "${managed}" != "true" ]; then
                    # echo "Skip ${sname}: not managed"
                    continue
                  fi

                  if [ -z "${vci_name}" ] || [ -z "${vci_ns}" ]; then
                    echo "Skip ${TARGET_NS}/${sname}: missing VCI labels (loft.sh/vcluster-instance-name|namespace)"
                    continue
                  fi

                  if ! kubectl -n "${vci_ns}" get virtualclusterinstance.management.loft.sh "${vci_name}" >/dev/null 2>&1; then
                    echo "Deleting orphan Secret ${TARGET_NS}/${sname} (VCI ${vci_ns}/${vci_name} not found)"
                    kubectl -n "${TARGET_NS}" delete secret "${sname}" --ignore-not-found
                  fi
                done

                sleep "${INTERVAL}"
              done